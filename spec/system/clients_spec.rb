require 'rails_helper'

RSpec.describe "Gestion des clients", type: :system do
  before do
    driven_by(:rack_test) # Change en :selenium_chrome si besoin de voir le navigateur
  end

  let!(:client) { create(:client, nom: "Dupont", prenom: "Jean", email: "jean@example.com", telephone: "0612345678") }

  ### ğŸŸ¢ 1. Tester la crÃ©ation d'un client
  it "crÃ©e un nouveau client" do
    visit new_client_path

    fill_in "Nom", with: "Martin"
    fill_in "PrÃ©nom", with: "Paul"
    fill_in "Email", with: "paul.martin@example.com"
    fill_in "TÃ©lÃ©phone", with: "0654321098"

    click_button "CrÃ©er Client"

    expect(page).to have_content "Le client a Ã©tÃ© crÃ©Ã© avec succÃ¨s"
    expect(page).to have_content "Martin"
    expect(page).to have_content "Paul"
  end

  ### ğŸŸ¡ 2. Tester la lecture (affichage) d'un client
  it "affiche un client" do
    visit client_path(client)

    expect(page).to have_content "Dupont"
    expect(page).to have_content "Jean"
    expect(page).to have_content "jean@example.com"
    expect(page).to have_content "0612345678"
  end

  ### ğŸ”µ 3. Tester la mise Ã  jour d'un client
  it "modifie un client" do
    visit edit_client_path(client)

    fill_in "Nom", with: "Durand"
    fill_in "PrÃ©nom", with: "Pierre"
    click_button "Mettre Ã  jour Client"

    expect(page).to have_content "Le client a Ã©tÃ© mis Ã  jour avec succÃ¨s"
    expect(page).to have_content "Durand"
    expect(page).to have_content "Pierre"
  end

  ### ğŸ”´ 4. Tester la suppression d'un client
  it "supprime un client" do
    visit clients_path

    expect(page).to have_content "Dupont"
    click_link "Supprimer", match: :first

    expect(page).to have_content "Le client a Ã©tÃ© supprimÃ© avec succÃ¨s"
    expect(page).not_to have_content "Dupont"
  end
end
